<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt">

<!-- Functions available in this style sheet: -->
<!--   Sqrt -->
<!--   HexToDecimal -->
<!--   EllipsoidalDist (returns the ellipsoidal distance for a given grid distance for a Transverse Mercator projection -->
<!--   ConvertDoubleToExponentialValue -->
<!--   GetBaseValueAndExponent (used by ConvertDoubleToExponentialValue) -->
<!--   ConvertFromExponentialValue (returns double value from exponential value) -->
<!--   RaiseToPower -->
<!--   NormalisedAngle (returns an angle between 0 and 360° or -180° and 180°) -->
<!--   ConvertSciToNumeric (will return a valid number for any value using scientific (exponential) notation) -->

<!-- **************************************************************** -->
<!-- *************** Return the square root of a value ************** -->
<!-- **************************************************************** -->
<xsl:template name="Sqrt">
  <xsl:param name="num" select="0"/>       <!-- The number you want to find the square root of -->
  <xsl:param name="try" select="1"/>       <!-- The current 'try'.  This is used internally. -->
  <xsl:param name="iter" select="1"/>      <!-- The current iteration, checked against maxiter to limit loop count - used internally -->
  <xsl:param name="maxiter" select="40"/>  <!-- Set this up to insure against infinite loops - used internally -->

  <!-- This template uses Sir Isaac Newton's method of finding roots -->

  <xsl:choose>
    <xsl:when test="$num &lt; 0"></xsl:when>  <!-- Invalid input - no square root of a negative number so return null -->
    <xsl:when test="$try * $try = $num or $iter &gt; $maxiter">
      <xsl:value-of select="$try"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="Sqrt">
        <xsl:with-param name="num" select="$num"/>
        <xsl:with-param name="try" select="$try - (($try * $try - $num) div (2 * $try))"/>
        <xsl:with-param name="iter" select="$iter + 1"/>
        <xsl:with-param name="maxiter" select="$maxiter"/>
      </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- ********** Convert Hexadecimal Value To Decimal Value ********** -->
<!-- **************************************************************** -->
<xsl:template name="HexToDecimal">
  <xsl:param name="hexNumber" />
  <xsl:param name="decimalNumber" >0</xsl:param>

  <!-- If there are zero hex digits left, output -->
  <xsl:choose>
    <xsl:when test="$hexNumber">
      <xsl:call-template name="HexToDecimal">
        <xsl:with-param name="decimalNumber" select="($decimalNumber*16)+number(substring-before(substring-after('00/11/22/33/44/55/66/77/88/99/A10/B11/C12/D13/E14/F15/a10/b11/c12/d13/e14/f15/',substring($hexNumber,1,1)),'/'))" />
        <xsl:with-param name="hexNumber" select="substring($hexNumber,2)" />
      </xsl:call-template>
    </xsl:when>
    <!-- otherwise multiply, and add the next digit, and recurse -->
    <xsl:otherwise>
      <xsl:value-of select="$decimalNumber"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- ******** Compute Ellipsoidal Distance From Grid Diatance ******* -->
<!-- **************************************************************** -->
<xsl:template name="EllipsoidalDist">
  <xsl:param name="gridDist"/>
  <xsl:param name="startEast"/>
  <xsl:param name="endEast"/>
  <xsl:param name="projectionType"/>
  <xsl:param name="falseEasting"/>
  <xsl:param name="centralMeridianScaleFactor"/>
  <xsl:param name="ellipsoidSemiMajorAxis"/>

  <xsl:choose>
    <xsl:when test="$projectionType = 'TransverseMercator'">
      <!-- We have a Transverse Mercator projection - compute the scale factor for the -->
      <!-- mean easting of the line and divide the grid distance by the scale factor   -->
      <!-- to get the ellipsoidal distance using the formula:                          -->
      <!--  SF = K0 + ((E1 - E0)^2 + (E1 - E0) * (E2 - E0) + (E2 - E0)^2) / (6 * R^2 * K0^2)) -->
      <xsl:variable name="deltaStartE" select="$startEast - $falseEasting"/>
      <xsl:variable name="deltaEndE" select="$endEast - $falseEasting"/>
      <xsl:variable name="meanLineScaleFactor" select="$centralMeridianScaleFactor +
                                                       ($deltaStartE * $deltaStartE + $deltaStartE * $deltaEndE + $deltaEndE * $deltaEndE) div
                                                       (6.0 * $ellipsoidSemiMajorAxis * $ellipsoidSemiMajorAxis * $centralMeridianScaleFactor * $centralMeridianScaleFactor)"/>
      <xsl:value-of select="$gridDist div $meanLineScaleFactor"/>
    </xsl:when>
    <xsl:otherwise>  <!-- Not a Transverse Mercator projection - simply return the grid distance -->
      <xsl:value-of select="$gridDist"/>
    </xsl:otherwise>
  </xsl:choose>

</xsl:template>


<!-- **************************************************************** -->
<!-- *********** Convert from double to exponential value *********** -->
<!-- **************************************************************** -->
<xsl:template name="ConvertDoubleToExponentialValue">
  <xsl:param name="value"/>

  <xsl:variable name="absValue" select="concat(substring('-',2 - ($value &lt; 0)), '1') * $value"/>

  <xsl:choose>
    <xsl:when test="$absValue = 0.0">
      <xsl:text>0.00000000000000000e+000</xsl:text>
    </xsl:when>

    <xsl:when test="($absValue &gt;= 1.0) and ($absValue &lt; 10.0)">
      <xsl:value-of select="format-number($value, '0.0000000000000')"/>
      <xsl:text>e+000</xsl:text>
    </xsl:when>

    <xsl:when test="$absValue &gt;= 10.0">
      <xsl:variable name="retVal">
        <xsl:call-template name="GetBaseValueAndExponent">
          <xsl:with-param name="value" select="$absValue"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:if test="$value &lt; 0.0">-</xsl:if>
      <xsl:value-of select="format-number(msxsl:node-set($retVal)/base, '0.0000000000000000')"/>
      <xsl:text>e</xsl:text>
      <xsl:value-of select="msxsl:node-set($retVal)/exponent"/>
    </xsl:when>

    <xsl:when test="$absValue &lt; 1.0">
      <xsl:variable name="retVal">
        <xsl:call-template name="GetBaseValueAndExponent">
          <xsl:with-param name="value" select="$absValue"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:if test="$value &lt; 0.0">-</xsl:if>
      <xsl:value-of select="format-number(msxsl:node-set($retVal)/base, '0.0000000000000000')"/>
      <xsl:text>e</xsl:text>
      <xsl:value-of select="msxsl:node-set($retVal)/exponent"/>
    </xsl:when>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- * Base & exponent vals used by ConvertDoubleToExponentialValue * -->
<!-- **************************************************************** -->
<xsl:template name="GetBaseValueAndExponent">
  <xsl:param name="value"/>
  <xsl:param name="exponent" select="0"/>

  <xsl:choose>
    <xsl:when test="$value &gt;= 10.0">
      <xsl:call-template name="GetBaseValueAndExponent">
        <xsl:with-param name="value" select="$value div 10.0"/>
        <xsl:with-param name="exponent" select="$exponent + 1"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:when test="$value &lt; 1.0">
      <xsl:call-template name="GetBaseValueAndExponent">
        <xsl:with-param name="value" select="$value * 10.0"/>
        <xsl:with-param name="exponent" select="$exponent - 1"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:otherwise>
      <xsl:element name="base" namespace="">
        <xsl:value-of select="$value"/>
      </xsl:element>
      <xsl:element name="exponent" namespace="">
        <xsl:choose>
          <xsl:when test="$exponent &gt;= 0.0">
            <xsl:text>+</xsl:text>
            <xsl:value-of select="format-number($exponent, '000')"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="format-number($exponent * -1.0, '000')"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:element>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- *********** Convert from exponential to double value *********** -->
<!-- **************************************************************** -->
<xsl:template name="ConvertFromExponentialValue">
  <xsl:param name="value"/>

  <xsl:choose>
    <xsl:when test="contains($value, 'e')">
      <xsl:variable name="baseVal" select="substring-before($value, 'e')"/>
      <xsl:variable name="exp" select="substring-after($value, 'e')"/>
      <xsl:variable name="expSign">
        <xsl:value-of select="substring($exp, 1, 1)"/>
      </xsl:variable>
      <xsl:variable name="exponent" select="substring($exp, 2, string-length($exp))"/>
      <xsl:variable name="mantissa">
        <xsl:choose>
          <xsl:when test="$expSign = '+'">10</xsl:when>
          <xsl:otherwise>0.1</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="factor">
        <xsl:call-template name="RaiseToPower">
          <xsl:with-param name="mantissa" select="$mantissa"/>
          <xsl:with-param name="exponent" select="number($exponent)"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:value-of select="$baseVal * $factor"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="$value"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- ************ Return value raised to specified power ************ -->
<!-- **************************************************************** -->
<xsl:template name="RaiseToPower">
  <xsl:param name="mantissa"/>
  <xsl:param name="accumulator" select="1"/>
  <xsl:param name="exponent"/>

  <xsl:choose>
    <xsl:when test="$exponent &gt; 0">
      <xsl:call-template name="RaiseToPower">
        <xsl:with-param name="mantissa" select="$mantissa"/>
        <xsl:with-param name="accumulator" select="$accumulator * $mantissa"/>
        <xsl:with-param name="exponent" select="$exponent - 1"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="$accumulator"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- ***** Return Angle between 0 and 360 or -180 to 180 degrees **** -->
<!-- **************************************************************** -->
<xsl:template name="NormalisedAngle">
  <xsl:param name="angle"/>
  <xsl:param name="plusMinus180" select="'false'"/>

  <xsl:variable name="fullCircleAngle">
    <xsl:choose>
      <xsl:when test="$angle &lt; 0">
        <xsl:variable name="newAngle">
          <xsl:value-of select="$angle + 360.0"/>
        </xsl:variable>
        <xsl:call-template name="NormalisedAngle">
          <xsl:with-param name="angle" select="$newAngle"/>
        </xsl:call-template>
      </xsl:when>

      <xsl:when test="$angle &gt;= 360.0">
        <xsl:variable name="newAngle">
          <xsl:value-of select="$angle - 360.0"/>
        </xsl:variable>
        <xsl:call-template name="NormalisedAngle">
          <xsl:with-param name="angle" select="$newAngle"/>
        </xsl:call-template>
      </xsl:when>

      <xsl:otherwise>
        <xsl:value-of select="$angle"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:choose>
    <xsl:when test="$plusMinus180 = 'false'">
      <xsl:value-of select="$fullCircleAngle"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$fullCircleAngle &lt;= 180.0">
          <xsl:value-of select="$fullCircleAngle"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$fullCircleAngle - 360.0"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- *** Convert scientific (exponential) notation vals to normal *** -->
<!-- **************************************************************** -->
<xsl:template name="ConvertSciToNumeric" >
  <xsl:param name="value" select="0"/>

  <xsl:variable name="max-exp" select="'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'"/>

  <xsl:variable name="inputCor">
    <xsl:choose>
      <xsl:when test="starts-with($value,'.')"><xsl:value-of select="concat('0', $value)"/></xsl:when>
      <xsl:when test="substring($value, 1, 2) = '+.'"><xsl:value-of select="concat('0', substring($value, 2))"/></xsl:when>
      <xsl:when test="substring($value, 1, 2) = '-.'"><xsl:value-of select="concat('-0', substring($value, 2))"/></xsl:when>
      <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="numInput">
    <xsl:value-of select="translate(string($inputCor), 'e', 'E')"/>
  </xsl:variable>

  <xsl:choose>
    <xsl:when test="string(number($numInput)) != 'NaN'">
      <xsl:value-of select="$numInput"/>
    </xsl:when>

    <xsl:otherwise>
      <!-- ==== Mantisa ==== -->
      <xsl:variable name="numMantisa">
        <xsl:value-of select="number(substring-before($numInput, 'E'))"/>
      </xsl:variable>

      <!-- ==== Exponent ==== -->
      <xsl:variable name="numExponent">
        <xsl:choose>
          <xsl:when test="contains($numInput, 'E+')">
            <xsl:value-of select="substring-after($numInput, 'E+')"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="substring-after($numInput, 'E')"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>

      <!-- ==== Coefficient ==== -->
      <xsl:variable name="numCoefficient">
        <xsl:choose>
          <xsl:when test="$numExponent &gt; 0">
            <xsl:text>1</xsl:text>
            <xsl:value-of select="substring($max-exp, 1, number($numExponent))"/>
          </xsl:when>
          <xsl:when test="$numExponent &lt; 0">
            <xsl:text>0.</xsl:text>
            <xsl:value-of select="substring($max-exp, 1, -number($numExponent)-1)"/>
            <xsl:text>1</xsl:text>
          </xsl:when>
          <xsl:otherwise>1</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:value-of select="number($numCoefficient) * number($numMantisa)"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- ********** Compute log to base 10 for passed in value ********** -->
<!-- **************************************************************** -->
<xsl:template name="Log10">
  <xsl:param name="number" select="1"/>
  <xsl:param name="n" select="0"/>   <!-- book keeping for whole part of result -->

  <xsl:choose>
    <xsl:when test="$number &lt;= 0"> <!-- Logarithms are undefined for 0 and negative numbers. -->
      <xsl:value-of select="'NaN'"/>
    </xsl:when>

    <xsl:when test="$number &lt; 1">  <!-- Fractional numbers have negative logs -->
      <xsl:call-template name="Log10">
        <xsl:with-param name="number" select="$number * 10"/>
        <xsl:with-param name="n" select="$n - 1"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:when test="$number > 10"> <!-- Numbers greater than 10 have logs greater than 1 -->
      <xsl:call-template name="Log10">
        <xsl:with-param name="number" select="$number div 10"/>
        <xsl:with-param name="n" select="$n + 1"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:when test="$number = 10">
      <xsl:value-of select="$n + 1"/>
    </xsl:when>

    <xsl:otherwise> <!-- We only need to know how to compute for numbers in range (1,10) -->
      <xsl:call-template name="Log10Util">
        <xsl:with-param name="number" select="$number"/>
        <xsl:with-param name="n" select="$n"/>
      </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<!-- **************************************************************** -->
<!-- **************** Actual log computation routine **************** -->
<!-- **************************************************************** -->
<xsl:template name="Log10Util">
  <xsl:param name="number"/>
  <xsl:param name="n"/>
  <xsl:param name="frac" select="0"/>     <!-- book keeping variable for fractional part -->
  <xsl:param name="k" select="0"/>        <!-- iteration counter -->
  <xsl:param name="divisor" select="2"/>  <!-- successive powers of 2 used to build up frac -->
  <xsl:param name="maxiter" select="38"/> <!-- Number of iterations. 38 is more than sufficient to get at least 10 dec place prec -->

  <!-- Computes log10 of numbers in the range [1,10) and returns the result + n -->
  <xsl:variable name="x" select="$number * $number"/>

  <xsl:choose>
    <xsl:when test="$k &gt;= $maxiter">  <!-- Round to 10 decimal places -->
      <xsl:value-of select="$n + round($frac * 10000000000) div 10000000000"/>
    </xsl:when>

    <xsl:when test="$x &lt; 10">
      <xsl:call-template name="Log10Util">
        <xsl:with-param name="number" select="$x"/>
        <xsl:with-param name="n" select="$n"/>
        <xsl:with-param name="k" select="$k + 1"/>
        <xsl:with-param name="divisor" select="$divisor * 2"/>
        <xsl:with-param name="frac" select="$frac"/>
        <xsl:with-param name="maxiter" select="$maxiter"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:otherwise>
      <xsl:call-template name="Log10Util">
        <xsl:with-param name="number" select="$x div 10"/>
        <xsl:with-param name="n" select="$n"/>
        <xsl:with-param name="k" select="$k + 1"/>
        <xsl:with-param name="divisor" select="$divisor * 2"/>
        <xsl:with-param name="frac" select="$frac + (1 div $divisor)"/>
        <xsl:with-param name="maxiter" select="$maxiter"/>
      </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


</xsl:stylesheet>
