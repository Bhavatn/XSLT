<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt">

<!-- Functions available in this style sheet: -->
<!--   ReversedNodeSet -->

<!-- **************************************************************** -->
<!-- ********** Return a Reverse Order Node Set Variable ************ -->
<!-- **************************************************************** -->
<xsl:template name="ReversedNodeSet">
  <xsl:param name="originalNodeSet"/>
  <xsl:param name="count"/>   <!-- Pass in the count of the elements in the node set -->
  <xsl:param name="item"/>    <!-- Initially set this equal to the element count     -->

  <!-- This recursive function will return the passed in node set in the reverse order -->
  <xsl:if test="$item &gt; 0">
    <xsl:choose>
      <xsl:when test="$item = $count">
        <xsl:for-each select="msxsl:node-set($originalNodeSet)/*[last()]">  <!-- Get the last element (returned first) -->
          <xsl:copy>
            <xsl:copy-of select="* | @*"/>
            <xsl:if test="text()">
              <xsl:value-of select="."/>
             </xsl:if>
          </xsl:copy>
        </xsl:for-each>
      </xsl:when>

      <xsl:otherwise>  <!-- Copy the appropriate preceding element -->
        <xsl:for-each select="msxsl:node-set($originalNodeSet)/*[last()]">  <!-- Get the last element -->
          <xsl:for-each select="preceding-sibling::*[$count - $item]">      <!-- get the required preceding element -->
            <xsl:copy>
              <xsl:copy-of select="* | @*"/>
              <xsl:if test="text()">
                <xsl:value-of select="."/>
               </xsl:if>
            </xsl:copy>
          </xsl:for-each>
        </xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>

    <!-- Recurse the function decrementing the item value -->
    <xsl:call-template name="ReversedNodeSet">
      <xsl:with-param name="originalNodeSet" select="$originalNodeSet"/>
      <xsl:with-param name="count" select="$count"/>
      <xsl:with-param name="item" select="$item - 1"/>
    </xsl:call-template>
  </xsl:if>

</xsl:template>


</xsl:stylesheet>
